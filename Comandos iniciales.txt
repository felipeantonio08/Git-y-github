git init            = inicializa un repositorio local, por default es la carpeta master donde hiran todos los commits que se envien
git status          = muestra el status de los archivos que estan dentro del repositorio 
git rm --cached .   = remueve de la memoria ram (Staging area) los archivos trackeados, se agrega -r para forma recursiva en carpetas
git rm --force .    = remueve del repositorio los archivos y aparte tambien del staging area, es decir del disco duro
git config --list   = lista las configuraciones de git
git config --list --show-origin             = muestra donde estan establecidas las configuraciones, los archivos donde estan localizados
git config --global user.name "$nameUser"   = setea el nombre del usuario de los commits
git config --global user.email $email       = setea el email del usuario de los commits.

git log $nameFile                   = muestra los cambios commiteados que ha sufrido un archivos
git log --stat                      = nos muestra el detalle de todos los archivos, indicandonos los cambios de cuantas lineas fueron insertadas y eliminadas

git show $nameFile                  = muestra el detalle de los cambios en un archivo especifico mostrando los cambios surgidos entre dos commits
git diff $commit1 $commit2          = muestra las diferencias entre los dos commits puestos, el $commit2 respecto al $commit1
git diff                            = nos muestra la diferencia entre lo que esta en zona de staging con lo que esta en el disco duro, ejemplo cuando a un archivo le hemos dado un add y le hacemos cambios posteriores no habiendo hecho el commit
git reset $commit --hard|--soft     = nos devuelve a determinado commit de forma brusca (borrando todo del control de versiones) o forma suave (dejando en el control de versiones unicamente lo que tengamos en el staging area)
git reset head [$nameFile]          = elimina del area de staging los archivos que han sido agregados a la misma, pero necesitan salir porque no se quieren enviar por no estar listos para este commit 
git checkout $commit $nameFile      = nos mueve hacia la version determinada del commit indicado en el archivo especificado
git checkout master $nameFile       = nos devuelve al commit ultimo que hemos ingresado
git commit -am "$message"           = nos hace la combinacion de add + commmit pero solo funciona si todos los archivos ya fueron commiteados alguna vez

git branch $nameBranch      = nos crea una nueva rama sobre el commit sobre el que este posicionado el HEAD
git checkout $nameBranch    = nos posiciona el HEAD sobre el ultimo commit que contiene la rama a la que nos estamos cambiando 
git merge $nameBranch       = nos ayuda a unificar los commits de la rama en la que estamos posicionados con el HEAD, con la rama que es pasada como argumento
***1

git remote add origin $url  = especifica un respositorio de origen al cual vamos a conectarnos para hacer pull y push
git remote                  = nos muestra los remotos que tenemos definidos por lo que debe mostrarse el 'origin'
git remote -v               = nos muestra los origines definidos, tanto para los fetch y push

git push origin $nameBranch = nos envia al origen definido la rama que especificamos
git pull origin $nameBranch = del origen nos trae la rama que especificamos
git pull origin $nameBranch --allow-unrelated-histories     = nos fusiona dos ramas del origen con la local con los commits que no estan relacionados  

git clone $url              = nos copia unicamente la rama master hacia el repositorio local, nos enlaza el origin tambien, esto lo hace un usuario que quiere trabajar en dicho repositorio.
***3

//se debe de registrar la llave publica antes en el servidor de github
git remote set-url origin $url      = setea una nueva url de conexion al repositorio remoto, se puede usar tanto para conexion ssh como https
***2
//realizar pull y push para verificar que se establezca conexion mediante la llave publica

git log --all                               = en ocasiones no nos muestra todo
git log --all --graph                       = funcionamiento de las ramas
git log --all --graph --decorate --oneline  = toda la historia comprimida
alias tree="git log --all --graph --decorate --oneline"   = creando un alias de comando, funciona en linux

git tag -a $name -m "$message" $commit  = definimos un nuevo tag asociado a determinado commit
git tag                                 = muestra los tags definidos
git show-ref --tags                     = muestra la asociacion del los tag con los commits
git push origin --tags                  = se envian los tags al reposotorio remoto  
git tag -d $name                        = para eliminar (delete) un tag definido por error pero de manera local
git push origin :refs/tags/$name        = elimina del repositorio remoto un tag que identifica un release en github

git show-branch --all                   = nos muestra todoas las ramas incluso las remotas y us historias
gitk                                    = lo mismo que el comando anterior pero de forma grafica en aplicacion externa

Notas:
-char == --string,  se usa char cuando el comando puede recibir argumentos de caracter que equivalen a poner con dos guiones el string del argumento completo. Ejemplo: git config -l == git config --list 
.                   representa a la carpeta actual
..                  representa a la carpeta padre que contiene a la actual 
esc+i               para entrar en mode escritura en el editor VIM 
esc+(shift+zz)      para salir guardando en el editor VIM, el mensaje del commit, cuando no se manda el argumento -m 
***1                Antes de empezar a modificar una rama es bueno hacer la actualizacion de la secundaria con lo contenido en la master, adicional despues de hacer un merge y este entre en conflicto por las mismas lineas modificadas, se debe mandar un commit con los cambios aceptados
-v                  es de verbal 
unrelated histories, una historia se refiere al conjunto de commits, de dos ramas que no son iguales o no hay comunes, sucede cuando nos conectamos a un origen que tiene commits que no estan en el repositorio local
origin\master       hace referencia a la rama master del repositorio remoto, ORIGIN es el estandar utilizado pero puede ser el nombre deseado para definirlo
***2                en su defecto se puede eliminar el origen establecido mediante. git remote rm origin, y despues volver a crearlo con la nueva url
tags                los tags no entran como cambios pero si se deben enviar, los tags son utiles en github
***3                se debe de dar permiso en las configuraciones del repositorio por parte del creador del mismo, si no al momente que se intente hacer un push dara error de permisos no autorizados

Llaves publicas y privadas:
ssh-keygen -t rsa -b 4096 -C "$email"       = -t el algoritmo de encripcion, -b complejidad del algoritmo, -C email al cual se asocian las llaves
eval $(ssh-agent -s)                        = examinar si el agente de ssh esta corriendo
ssh-add ~/.ssh/id_rsa                       = se agrega la llave privada al agente de ssh

Pull request: (https://platzi.com/clases/1557-git-github/19957-utilizando-pull-requests-en-github/)
Nombre rama: fix-typo
caracteristica de github que permite el poder aprobar determinados cambios antes que se haga el merge entre ramas
es un paso previo a hacer el merge entre la rama feature y la rama de stagging develop para que otros miembros del equipo revisen los cambios
Permite a otras personas que no son colaboradores del repositorio aportar
Tambien existe en gitlab (merge request). bitbucket (push request)

Fork: (https://platzi.com/clases/1557-git-github/19978-creando-un-fork-contribuyendo-a-un-repositorio/)
Cuando se quiere trabajar con otros proyectos publicos de otras personas o de codigo abierto.
1) se hace un fork del lado del proyecto publico, lo que nos crea uno de nuestro lado.
2) se trabaja de igual forma subiendo los cambios realizados al proyecto de nuestro lado.
3) cuando ya este listo el cambio se tiene que hacer un pull request del lado nuestro proyecto.
4) cambia un poco la solicitud del pull request al comparado anteriormente ya que se selecciona el repositorio y rama a comparar, pero aqui solo se hace el pull request y no se puede definir como revisores,etc.
5) del lado del proyecto original se hace la aprobacion o solicitud de cambios.
6) el fork se puede quedar atras del proyecto original con el tiempo, lo que se puede hacer es definir un nuevo origen de repositio, por lo general se llamara "upstream" y pasarlo a la rama master local y despues subirlo

.gitignore          archivo donde se describen que archivos no van al repositorio
readme.md           se escribe con lenguaje de markdown y tambien html, pagina de ayuda: https://pandao.github.io/editor.md/en.html
github pages        se pueden utilizar paginas para entrada ya sea personales o para un proyecto, a traves de https://pages.github.com/ unicamente se habilita y por default se accede al readme como entrada por: $nameAccount.github.io/$nameRepositorio