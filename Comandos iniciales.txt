git init            = inicializa un repositorio local, por default es la carpeta master donde hiran todos los commits que se envien
git status          = muestra el status de los archivos que estan dentro del repositorio 
git rm --cached .   = remueve de la memoria ram (Staging area) los archivos trackeados
git config --list   = lista las configuraciones de git
git config --list --show-origin = muestra donde estan establecidas las configuraciones, los archivos donde estan localizados
git config --global user.name "$nameUser" = setea el nombre del usuario de los commits
git config --global user.email $email = setea el email del usuario de los commits.
git log $nameFile   = muestra los cambios commiteados que ha sufrido un archivos
git show $nameFile  = muestra el detalle de los cambios en un archivo especifico mostrando los cambios surgidos entre dos commits
git diff $commit1 $commit2   = muestra las diferencias entre los dos commits puestos, el $commit2 respecto al $commit1
git diff            = nos muestra la diferencia entre lo que esta en zona de staging con lo que esta en el disco duro, ejemplo cuando a un archivo le hemos dado un add y le hacemos cambios posteriores no habiendo hecho el commit
git reset $commit --hard|--soft     = nos devuelve a determinado commit de forma brusca (borrando todo del control de versiones) o forma suave (dejando en el control de versiones los commits posteriores)
git log --stat      = nos muestra el detalle de todos los archivos, indicandonos los cambios de cuantas lineas fueron insertadas y eliminadas
git checkout $commit $nameFile      = nos mueve hacia la version determinada del commit indicado en el archivo especificado
git checkout master $nameFile       = nos devuelve al commit ultimo que hemos ingresado
git commit -am "$message"           = nos hace la combinacion de add + commmit pero solo funciona si todos los archivos ya fueron commiteados alguna vez

git branch $nameBranch      = nos crea una nueva rama sobre el commit sobre el que este posicionado el HEAD
git checkout $nameBranch    = nos posiciona el HEAD sobre el ultimo commit que contiene la rama a la que nos estamos cambiando 
git merge $nameBranch       = nos ayuda a unificar los commits de la rama en la que estamos posicionados con el HEAD, con la rama que es pasada como argumento
***1

git remote add origin $url  = especifica un respositorio de origen al cual vamos a conectarnos para hacer pull y push
git remote                  = nos muestra los remotos que tenemos definidos por lo que debe mostrarse el 'origin'
git remote -v               = nos muestra los origines definidos, tanto para los fetch y push

git push origin $nameBranch = nos envia al origen definido la rama que especificamos
git pull origin $nameBranch = del origen nos trae la rama que especificamos
git pull origin $nameBranch --allow-unrelated-histories     = nos fusiona dos ramas del origen con la local con los commits que no estan relacionados  

Notas:
-char == --string,  se usa char cuando el comando puede recibir argumentos de caracter que equivalen a poner con dos guiones el string del argumento completo. Ejemplo: git config -l == git config --list 
.                   representa a la carpeta actual
..                  representa a la carpeta padre que contiene a la actual 
esc+(shift+zz)      para salir guardando en el editor VIM, el mensaje del commit, cuando no se manda el argumento -m 
***1                Antes de empezar a modificar una rama es bueno hacer la actualizacion de la secundaria con lo contenido en la master, adicional despues de hacer un merge y este entre en conflicto por las mismas lineas modificadas, se debe mandar un commit con los cambios aceptados
-v                  es de verbal 
unrelated histories, una historia se refiere al conjunto de commits, de dos ramas que no son iguales o no hay comunes, sucede cuando nos conectamos a un origen que tiene commits que no estan en el repositorio local
origin\master       hace referencia a la rama master del repositorio remoto